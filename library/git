#cache local
git stash
git stash list
git stash pop

#This will list all branches which contain the commits from "branch-to-delete". If it reports more than just "branch-to-delete", the branch has been merged.
git branch --contains branch-to-delete

#To see a list of which commits are on one branch but not another, use git log:
git log oldbranch ^newbranch --no-merges

git log staging ^origin/staging --no-merges

#git log author
git log --author='\(Adam\)\|\(Jon\)'

#create tags [on a commit]
git tag -a [VERSION] [COMMIT] -m "[COMMIT_MSG]"
git push origin [VERSION]

# list commits in latest tags
git log --oneline
git log --oneline $(git describe --tags --abbrev=0 @^)..@

#list commits between tags
git log --oneline [TAG2]...[TAG1]

#local tags sync | safe to run
git tag -l | xargs git tag -d && git fetch

#Delete remote tags.
git tag -l | xargs -n 1 git push --delete origin

#List old QA/STG remote tags. older than 3 months
git for-each-ref --sort=taggerdate --format '%(refname:short) %(taggerdate:short)' refs/tags | egrep "(-rc|-beta)" | egrep -v "($(date +%Y-%m)|$(date -v "-1m" +%Y-%m)|$(date -v "-2m" +%Y-%m))"

#delete old tags
git for-each-ref --sort=taggerdate --format '%(refname:short) %(taggerdate:short)' refs/tags | egrep "(-rc|-beta)" | egrep -v "($(date +%Y-%m)|$(date -v "-1m" +%Y-%m)|$(date -v "-2m" +%Y-%m))" | xargs -n 1 git push --delete origin


#To delete all local branches that are already merged into the currently checked out branch:
git branch --merged | egrep -v "(^\*|master|dev)" | xargs git branch -d

#You can see that master and dev are excluded in case they are an ancestor.
#You can delete a merged local branch with:
git branch -d branchname

#If it's not merged, use:
git branch -D branchname

#To delete it from the remote in old versions of Git use:
git push origin :branchname

#In more recent versions of Git use:
git push --delete origin branchname

#Once you delete the branch from the remote, you can prune to get rid of remote tracking branches with:
git remote prune origin

#or prune individual remote tracking branches, as the other answer suggests, with:
git branch -dr branchname


#rename local branch
git branch -m new-name
git branch -m old-name new-name

#Delete the old-name remote branch and push the new-name local branch.
git push origin :old-name new-name


###REPOs CLEANUP

#local
git branch | egrep -v "(^\*|develop)"
git branch | egrep -v "(^\*|develop)" | xargs git branch -D

#remote
git remote prune origin
git branch -r | egrep -v "(^\*|master|develop)" | sed -e "s/origin\///"
git branch -r | egrep -v "(^\*|master|develop)" | sed -e "s/origin\///" | xargs git push origin --delete --no-verify
